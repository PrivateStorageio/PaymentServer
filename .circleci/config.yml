# Copyright 2019 PrivateStorage.io, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: 2.1

jobs:
  build:
    docker:
      # Run in a highly Nix-capable environment.  This lets us use Stack's nix
      # integration and other useful Nix features to specify and run the
      # build.
      - image: "nixorg/nix:circleci"

    resource_class: "xlarge"

    environment:
      # Specify a revision of NixOS/nixpkgs to run against.  This essentially
      # pins the majority of the software involved in the build.  This
      # revision is selected arbitrarily.  It's somewhat current as of the
      # time of this comment.  We can bump it to a newer version when that
      # makes sense.  Meanwhile, the platform won't shift around beneath us
      # unexpectedly.
      NIXPKGS_REV: "92609f3d9bc3acffbdbe54fa1c591a885612aa73"

    steps:
      - run:
          name: "Setup Environment Variables"
          command: |
            # Get NIX_PATH set for the rest of the job so that the revision of
            # nixpkgs we selected will be used everywhere Nix pulls in software.
            # There is no way to set an environment variable containing the
            # value of another environment variable on CircleCI except to use
            # the `BASH_ENV` feature as we do here.
            echo "export NIX_PATH=nixpkgs=https://github.com/NixOS/nixpkgs/archive/$NIXPKGS_REV.tar.gz" >> $BASH_ENV
            # Set XDG_CONFIG_DIRS to point at the source directory, so that nix
            # will pickup nix/nix.conf as a configuration file from there.
            echo "export XDG_CONFIG_DIRS=$CIRCLE_WORKING_DIRECTORY" >> $BASH_ENV

      # Get *our* source code.
      - "checkout"

      - "run":
          # CircleCI won't let us interpolate NIXPKGS_REV into a cache key.
          # Only CircleCI's own environment variables or variables set via the
          # web interface in a "context" can be interpolated into cache keys.
          # However, we can interpolate the checksum of a file...  Since we
          # don't care about the exact revision, we just care that a new
          # revision gives us a new string, we can write the revision to a
          # file and then put the checksum of that file into the cache key.
          # This way, we don't have to maintain the nixpkgs revision in two
          # places and risk having them desynchronize.
          name: "Prepare For Cache Key"
          command: |
            echo "${NIXPKGS_REV}" > nixpkgs.rev

      - restore_cache:
          # Get all of Nix's state relating to the particular revision of
          # nixpkgs we're using.  It will always be the same.  CircleCI
          # artifacts and nixpkgs store objects are probably mostly hosted in
          # the same place (S3) so there's not a lot of difference for
          # anything that's pre-built.  For anything we end up building
          # ourselves, though, this saves us all of the build time (less the
          # download time).
          #
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          name: "Restore Nix Store Paths"
          keys:
            # Construct cache keys that allow sharing as long as nixpkgs and
            # the python-challenge-bypass-ristretto library are the same.
            #
            # If python-challenge-bypass-ristretto changes, we have to rebuild
            # it so we may as well throw away the part of the cache with the
            # old build and make a new one with the new build so we don't have
            # to rebuild it *again* next time.
            #
            # If nixpkgs changes then potentially a lot of cached packages for
            # the base system will be invalidated so we may as well drop them
            # and make a new cache with the new packages.
            - paymentserver-nix-store-v5-{{ checksum "nixpkgs.rev" }}-{{ checksum "nix/challenge-bypass-ristretto-repo.nix" }}
            - paymentserver-nix-store-v5-{{ checksum "nixpkgs.rev" }}-
            - paymentserver-nix-store-v5-

      - run:
          name: "Building with Nix"
          command: |
            nix-build \
              -j 4 \
              ./nix/ \
              -A PaymentServer.components.exes."PaymentServer-exe"

      - run:
          name: "Building Tests"
          command: |
            nix-build \
              -j 4 \
              ./nix/ \
              -A PaymentServer.components.tests."PaymentServer-tests"

      - run:
          name: "Running Tests"
          command: |
            ./result/bin/PaymentServer-tests

      - save_cache:
          name: "Cache Nix Store Paths"
          key: paymentserver-nix-store-v5-{{ checksum "nixpkgs.rev" }}-{{ checksum "nix/challenge-bypass-ristretto-repo.nix" }}
          paths:
            - "/nix"

workflows:
  version: 2
  everything:
    jobs:
      - "build"
