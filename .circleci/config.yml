# Copyright 2019 PrivateStorage.io, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: 2.1

jobs:
  build:
    docker:
      # Run in a highly Nix-capable environment.  This lets us use Stack's nix
      # integration and other useful Nix features to specify and run the
      # build.
      - image: "nixos/nix:2.3.16"

    resource_class: "xlarge"

    environment:
      NIX_CONFIG: |
        # Add privatestorage's and haskell.nix[1] nix caches for builds.  [1]
        # https://input-output-hk.github.io/haskell.nix/tutorials/getting-started/#setting-up-the-binary-cache
        extra-substituters = http://saxtons.private.storage/ https://hydra.iohk.io/
        # We needed to explictly specify the key for cache.nixos.org until we
        # are using a version of nix that has
        # https://github.com/NixOS/nix/commit/ff4dea63c9403880500f82ce273713ecf793d2d9
        extra-trusted-public-keys = saxtons.private.storage:MplOcEH8G/6mRlhlKkbA8GdeFR3dhCFsSszrspE/ZwY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=

    steps:
      # Get *our* source code.
      - "checkout"
      - restore_cache:
          # Get all of Nix's state relating to the particular revision of
          # nixpkgs we're using.  It will always be the same.  CircleCI
          # artifacts and nixpkgs store objects are probably mostly hosted in
          # the same place (S3) so there's not a lot of difference for
          # anything that's pre-built.  For anything we end up building
          # ourselves, though, this saves us all of the build time (less the
          # download time).
          #
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          name: "Restore Nix Store Paths"
          keys:
            # Construct cache keys that allow sharing as long as nixpkgs and
            # the python-challenge-bypass-ristretto library are the same.
            #
            # If python-challenge-bypass-ristretto changes, we have to rebuild
            # it so we may as well throw away the part of the cache with the
            # old build and make a new one with the new build so we don't have
            # to rebuild it *again* next time.
            #
            # If nixpkgs changes then potentially a lot of cached packages for
            # the base system will be invalidated so we may as well drop them
            # and make a new cache with the new packages.
            - paymentserver-nix-store-v6-{{ checksum "nix/sources.json" }}
            - paymentserver-nix-store-v6-

      - run:
          name: "Building with Nix"
          command: |
            echo "XDG_CONFIG_DIRS: $XDG_CONFIG_DIRS"
            nix-build \
              -vvvv \
              --debug \
              -j 4 \
              ./nix/ \
              -A PaymentServer.components.exes."PaymentServer-exe"

      - run:
          name: "Building Tests"
          command: |
            nix-build \
              -j 4 \
              ./nix/ \
              -A PaymentServer.components.tests."PaymentServer-tests"

      - run:
          name: "Running Tests"
          command: |
            ./result/bin/PaymentServer-tests

      - save_cache:
          name: "Cache Nix Store Paths"
          key: paymentserver-nix-store-v6-{{ checksum "nix/sources.json" }}
          paths:
            - "/nix"

workflows:
  version: 2
  everything:
    jobs:
      - "build"
