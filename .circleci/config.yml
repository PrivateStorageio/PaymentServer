# Copyright 2019 PrivateStorage.io, LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: 2.1

jobs:
  build:
    docker:
      # Run in a highly Nix-capable environment.  This lets build with Nix
      # directly.
      - image: "nixos/nix:2.10.3"

    resource_class: "xlarge"

    environment:
      # Add privatestorage's and haskell.nix[1] nix caches for builds.  [1]
      # https://input-output-hk.github.io/haskell.nix/tutorials/getting-started/#setting-up-the-binary-cache
      #
      # - iohk gives us lots of excellent cached Haskell-related objects
      # - saxtons gives us a lot of other nice stuff such as Rust crates and any
      #   more Haskell libraries we might need
      #
      # Note the use of `>-` - YAML "folded-style chomping-strip block string"
      # style to keep the list orderly in the source file yet represent a
      # single line string with no trailing newline.
      # https://stackoverflow.com/questions/3790454/how-do-i-break-a-string-in-yaml-over-multiple-lines/21699210
      # is an excellent resource on yaml strings.
      EXTRA_SUBSTITUTERS: >-
        https://hydra.iohk.io/
        http://saxtons.private.storage/

      # We needed to explictly specify the key for cache.nixos.org until we
      # are using a version of nix that has
      # https://github.com/NixOS/nix/commit/ff4dea63c9403880500f82ce273713ecf793d2d9
      TRUSTED_PUBLIC_KEYS: >-
        cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
        hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=
        saxtons.private.storage:MplOcEH8G/6mRlhlKkbA8GdeFR3dhCFsSszrspE/ZwY=

      # CACHIX_AUTH_TOKEN is manually set in the CircleCI web UI and allows us
      # to push to CACHIX_NAME.
      CACHIX_NAME: "privatestorage-opensource"

      # Pin a NixOS 21.11 revision.  Most of the software involved in the
      # build process is pinned by nix/sources.json with niv but a few things
      # need to work before we get that far.  This pin is for those things.
      # This pin has no particular bearing on what version of our dependencies
      # we are testing against, what version of Python we support, etc.  It is
      # part of CI infrastructure.
      NIXPKGS: "https://github.com/NixOS/nixpkgs/archive/28abc4e43a24d28729509e2d83f5c4f3b3418189.tar.gz"

    steps:
      - run: &SETUP_CACHIX
          name: "Set up Cachix"
          command: |
            # Install cachix, the Nix-friendly caching tool.
            nix-env -f $NIXPKGS -iA cachix bash
            # Activate it for "binary substitution".  This sets up
            # configuration that lets Nix download something from the cache
            # instead of building it locally, if possible.
            cachix use "${CACHIX_NAME}"

      # Get *our* source code.
      - "checkout"

      - run:
          name: "Define Cache Helper"
          command: |
            # Define a function in the CircleCI shared-across-steps
            # configuration file so we can share the cache-related logic
            # across the next few steps.
            #
            # The escape on the heredoc syntax is required by CircleCI.
            echo >> "$BASH_ENV" \<<EOF
            function maybe-cache() {
              # The `cachix watch-exec ...` does our cache population.  When
              # it sees something added to the store (I guess) it pushes it to
              # the named cache.
              #
              # We can only *push* to it if we have a CACHIX_AUTH_TOKEN,
              # though.  in-repo jobs will get this from CircleCI
              # configuration but jobs from forks may not.
              if [ -v CACHIX_AUTH_TOKEN ]; then
                cachix watch-exec "${CACHIX_NAME}" -- "$@"
              else
                # If we're building a from a forked repository then we're
                # allowed to not have the credentials (but it's also fine if
                # the owner of the fork supplied their own).
                #
                # https://circleci.com/docs/built-in-environment-variables/ says
                # about `CIRCLE_PR_REPONAME`:
                #
                #   The name of the GitHub or Bitbucket repository where the
                #   pull request was created. Only available on forked PRs.
                #
                # So if it is not set then we should have had credentials and we
                # fail if we get here.
                if [ -v CIRCLE_PR_REPONAME ]; then
                  "$@"
                else
                  echo "Required credentials (CACHIX_AUTH_TOKEN) are missing."
                  exit 1
                fi
              fi
            }
            EOF

      - run:
          name: "Building with Nix"
          command: |
            maybe-cache nix-build \
              --option extra-substituters "${EXTRA_SUBSTITUTERS}" \
              --option extra-trusted-public-keys "${TRUSTED_PUBLIC_KEYS}" \
              -j 4 \
              ./nix/ \
              -A PaymentServer.components.exes."PaymentServer-exe"

      - run:
          name: "Building Tests"
          command: |
            maybe-cache nix-build \
              --option extra-substituters "${EXTRA_SUBSTITUTERS}" \
              --option extra-trusted-public-keys "${TRUSTED_PUBLIC_KEYS}" \
              -j 4 \
              ./nix/ \
              -A PaymentServer.components.tests."PaymentServer-tests"

      - run:
          name: "Running Tests"
          command: |
            ./result/bin/PaymentServer-tests

workflows:
  version: 2
  everything:
    jobs:
      - "build"
